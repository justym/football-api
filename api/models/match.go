// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Match match
//
// swagger:model Match
type Match struct {

	// date
	// Required: true
	Date *string `json:"date"`

	// score1
	// Required: true
	Score1 Score `json:"score1"`

	// score2
	// Required: true
	Score2 Score `json:"score2"`

	// team1
	// Required: true
	Team1 *Club `json:"team1"`

	// team2
	// Required: true
	Team2 *Club `json:"team2"`
}

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateScore1(formats strfmt.Registry) error {

	if err := m.Score1.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("score1")
		}
		return err
	}

	return nil
}

func (m *Match) validateScore2(formats strfmt.Registry) error {

	if err := m.Score2.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("score2")
		}
		return err
	}

	return nil
}

func (m *Match) validateTeam1(formats strfmt.Registry) error {

	if err := validate.Required("team1", "body", m.Team1); err != nil {
		return err
	}

	if m.Team1 != nil {
		if err := m.Team1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team1")
			}
			return err
		}
	}

	return nil
}

func (m *Match) validateTeam2(formats strfmt.Registry) error {

	if err := validate.Required("team2", "body", m.Team2); err != nil {
		return err
	}

	if m.Team2 != nil {
		if err := m.Team2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
