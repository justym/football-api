// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SeasonTeams season teams
//
// swagger:model SeasonTeams
type SeasonTeams struct {

	// club
	// Required: true
	Club []*Club `json:"club"`

	// name
	// Required: true
	Name SeasonName `json:"name"`
}

// Validate validates this season teams
func (m *SeasonTeams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeasonTeams) validateClub(formats strfmt.Registry) error {

	if err := validate.Required("club", "body", m.Club); err != nil {
		return err
	}

	for i := 0; i < len(m.Club); i++ {
		if swag.IsZero(m.Club[i]) { // not required
			continue
		}

		if m.Club[i] != nil {
			if err := m.Club[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("club" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SeasonTeams) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeasonTeams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeasonTeams) UnmarshalBinary(b []byte) error {
	var res SeasonTeams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
